{"version":3,"sources":["utils/items.js","app/components/dropItem.jsx","app/components/flowChart.js","App.js","features/counter/counterSlice.js","app/store.js","index.js"],"names":["ItemTypes","DropItem","props","name","type","useDrag","item","collect","monitor","isDragging","dragCard","className","ref","style","height","width","border","opacity","initialElements","id","data","label","position","x","y","FlowChart","useState","elements","setElements","useDrop","accept","drop","console","log","newElements","newNode","String","Math","random","length","push","handleIf","isOver","itemName","newNodeId","trueNodeId","trueNode","falseNodeId","falseNode","leftNodeodeConnect","source","target","animated","rightNodeodeConnect","zoomOnScroll","paneMoveable","onElementsRemove","elementsToRemove","els","removeElements","onConnect","params","addEdge","deleteKeyCode","color","gap","App","DndProvider","backend","HTML5Backend","counterSlice","createSlice","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.0fb5c5b6.chunk.js","sourcesContent":["export const ItemTypes = {\r\n    CARD: 'card',\r\n    IF: 'if'\r\n  }\r\n","import React from \"react\";\r\nimport {  useDrag } from 'react-dnd';\r\n\r\nexport default function DropItem(props) {\r\n    const {name , type} = props;\r\n\r\n    const [{isDragging} , dragCard] = useDrag({\r\n        item : {\r\n          type : type,\r\n          name : name\r\n        },\r\n        collect : monitor => ({\r\n            isDragging : !!monitor.isDragging()\r\n        })\r\n      })\r\n\r\n  return (\r\n    <>\r\n      <div className=\"\" ref={dragCard} style={{height: 20, width: 200 , border: \"1px solid black\", opacity: isDragging ? 0.1 : 1}}>\r\n          {name}\r\n      </div>\r\n    </>\r\n\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useDrop } from 'react-dnd';\r\nimport ReactFlow, { removeElements, addEdge, MiniMap, Controls, Background } from 'react-flow-renderer';\r\nimport { ItemTypes } from \"../../utils/items\";\r\nimport DropItem from './dropItem';\r\n\r\n\r\nconst initialElements = [\r\n  {\r\n    id: '1',\r\n    type: 'input',\r\n    data: { label: 'Start' },\r\n    position: { x: 250, y: 25 },\r\n  }\r\n];\r\n\r\nconsole.log(initialElements);\r\n\r\nexport default function FlowChart(){\r\n  const [elements, setElements] = useState(initialElements);\r\n\r\n  const onElementsRemove = (elementsToRemove) =>\r\n    setElements((els) => removeElements(elementsToRemove, els));\r\n  const onConnect = (params) => {\r\n    console.log(params);\r\n    setElements((els) => addEdge(params, els));\r\n  }\r\n\r\n  const [{isOver} , drop] = useDrop({\r\n    accept : [ItemTypes.CARD , ItemTypes.IF],\r\n    drop : (item , monitor) => {\r\n      console.log(item);\r\n      if(item.type === \"if\"){\r\n        handleIf(item.name);\r\n        return\r\n      }\r\n      let newElements = [...elements];\r\n      let newNode = {\r\n        id: String(Math.random()),\r\n        data: { label: item.name },\r\n        position: { x: 500, y: 25+elements.length*45 },\r\n      }\r\n      newElements.push(newNode);\r\n      setElements(newElements);\r\n\r\n    },\r\n    collect: (monitor) => ({\r\n      isOver: !!monitor.isOver()\r\n    })\r\n  })\r\n\r\n  const handleIf =(itemName)=>{\r\n    let newNodeId = String(Math.random());\r\n    let newNode = {\r\n      id: newNodeId,\r\n      data: { label: itemName },\r\n      position: { x: 500, y: 25+elements.length*45 },\r\n    }\r\n    let newElements = [...elements]\r\n    let trueNodeId = String(Math.random())\r\n    let trueNode = {\r\n      id: trueNodeId,\r\n      data: { label: \"TRUE\" },\r\n      position: { x: 400, y: 105+elements.length*45 },\r\n    }\r\n    let falseNodeId = String(Math.random())\r\n    let falseNode = {\r\n      id: falseNodeId,\r\n      data: { label: \"False\" },\r\n      position: { x: 600, y: 105+elements.length*45 },\r\n    }\r\n    newElements.push(newNode);\r\n    newElements.push(trueNode);\r\n    newElements.push(falseNode);\r\n    let leftNodeodeConnect = { id: String(Math.random()), source: newNodeId, target: trueNodeId, animated: true }\r\n    let rightNodeodeConnect = { id: String(Math.random()), source: newNodeId, target: falseNodeId, animated: true }\r\n    newElements.push(leftNodeodeConnect);\r\n    newElements.push(rightNodeodeConnect);\r\n    setElements(newElements);\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n        <div className=\"canvas\" ref={drop} style={{opacity : isOver?  \"rgb(247, 234, 234)\" : \"white\"}}>\r\n          <ReactFlow\r\n            elements={elements}\r\n            zoomOnScroll={true}\r\n            paneMoveable={true}\r\n            onElementsRemove={onElementsRemove}\r\n            onConnect={onConnect}\r\n            deleteKeyCode={46} /* 'delete'-key */\r\n          >\r\n              <MiniMap />\r\n              <Controls />\r\n              <Background color=\"#aaa\" gap={16} />\r\n            </ReactFlow>\r\n        </div>\r\n        <div className=\"toolbox\">\r\n            <DropItem name=\"Send Mail\" type=\"card\"/>\r\n            <DropItem name=\"If/Else\" type=\"if\"/>\r\n            <DropItem name=\"Go To\" type=\"card\"/>\r\n            <DropItem name=\"Subscribe\" type=\"card\"/>\r\n            <DropItem name=\"Unsubscribe\" type=\"card\"/>\r\n            <DropItem name=\"Update Contact\" type=\"card\"/>\r\n        </div>\r\n\r\n    </div>\r\n\r\n  );\r\n}","import React from 'react';\r\n// import { Counter } from './features/counter/Counter';\r\nimport FlowChart from \"./app/components/flowChart\"\r\nimport { HTML5Backend } from 'react-dnd-html5-backend'\r\nimport { DndProvider } from 'react-dnd'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <DndProvider backend={HTML5Backend}>\r\n      <div className=\"App\">\r\n        <FlowChart />\r\n      </div>\r\n    </DndProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}